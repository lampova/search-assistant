import json
import os
import requests
from geopy.distance import geodesic
from typing import List, Dict, Any, Optional


class GeocodingService:
    @staticmethod
    def geocode_address(address: str) -> Optional[tuple]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–¥—Ä–µ—Å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim (OpenStreetMap) - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            url = f"https://nominatim.openstreetmap.org/search"
            params = {
                'q': address,
                'format': 'json',
                'limit': 1
            }

            headers = {
                'User-Agent': 'PriceManagerApp/1.0'
            }

            response = requests.get(url, params=params, headers=headers)
            response.raise_for_status()

            data = response.json()
            if data:
                return (float(data[0]['lat']), float(data[0]['lon']))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        return None

    @staticmethod
    def calculate_distance(coord1: tuple, coord2: tuple) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º"""
        return geodesic(coord1, coord2).km


class PriceManager:
    def __init__(self):
        self.companies_file = 'companies.json'
        self.products_file = 'products.json'
        self.user_address = "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1"
        self.user_location = self._get_user_location()

    def _get_user_location(self) -> tuple:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∞–¥—Ä–µ—Å–∞
        location = GeocodingService.geocode_address(self.user_address)
        if location:
            return location

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return (55.7558, 37.6173)  # –ú–æ—Å–∫–≤–∞

    def load_data(self, filename: str) -> List[Dict]:
        if os.path.exists(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []

    def save_data(self, filename: str, data: List[Dict]):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def set_user_location(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–¥—Ä–µ—Å—É"""
        print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ===")
        city = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ").strip()
        street = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —É–ª–∏—Ü—É –∏ –¥–æ–º: ").strip()

        user_address = f"{city}, {street}"
        location = GeocodingService.geocode_address(user_address)

        if location:
            self.user_address = user_address
            self.user_location = location
            print(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_address}")
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location}")
            return location
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥:")
            lat = float(input("–®–∏—Ä–æ—Ç–∞: "))
            lon = float(input("–î–æ–ª–≥–æ—Ç–∞: "))
            self.user_location = (lat, lon)
            return (lat, lon)

    def add_company_price(self):
        print("\n=== –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è ===")

        companies = self.load_data(self.companies_file)
        products = self.load_data(self.products_file)

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏
        company_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è: ")
        city = input("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥: ").strip()
        street = input("–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º: ").strip()

        company_address = f"{city}, {street}"

        # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        print("–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...")
        location = GeocodingService.geocode_address(company_address)

        if not location:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
            lat = float(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É –≤—Ä—É—á–Ω—É—é: "))
            lon = float(input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É –≤—Ä—É—á–Ω—É—é: "))
            location = (lat, lon)

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è
        new_company = {
            "id": len(companies) + 1,
            "name": company_name,
            "address": company_address,
            "location": list(location)
        }
        companies.append(new_company)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è {company_name}:")
        print("(–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '—Å—Ç–æ–ø' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞)")

        while True:
            product_name = input("\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ").strip()
            if product_name.lower() == '—Å—Ç–æ–ø':
                break

            try:
                price = float(input("–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: "))

                new_product = {
                    "id": len(products) + 1,
                    "name": product_name,
                    "price": price,
                    "company_id": new_company["id"]
                }
                products.append(new_product)
                print(f"‚úì –¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")

            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.save_data(self.companies_file, companies)
        self.save_data(self.products_file, products)
        print(f"\n‚úÖ –ü—Ä–∞–π—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è '{company_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        print(f"–ê–¥—Ä–µ—Å: {company_address}")
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len([p for p in products if p['company_id'] == new_company['id']])}")

    def search_products(self):
        print("\n=== –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ===")
        search_term = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").lower().strip()

        if not search_term:
            print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return []

        companies = self.load_data(self.companies_file)
        products = self.load_data(self.products_file)

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        found_products = []
        for product in products:
            if search_term in product['name'].lower():
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                company = next((c for c in companies if c['id'] == product['company_id']), None)
                if company and 'location' in company:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    company_coords = tuple(company['location'])
                    distance = GeocodingService.calculate_distance(self.user_location, company_coords)

                    # –ë–∞–ª–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: —Ü–µ–Ω–∞ + —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    distance_weight = 10  # 1 –∫–º = 10 —Ä—É–± "—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
                    total_score = product['price'] + distance * distance_weight

                    found_products.append({
                        'product': product,
                        'company': company,
                        'distance': distance,
                        'total_score': total_score
                    })

        return found_products

    def show_best_options(self, products: List[Dict]):
        if not products:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É (—Ü–µ–Ω–∞ + —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
        sorted_products = sorted(products, key=lambda x: x['total_score'])

        print(f"\nüéØ –¢–æ–ø-3 –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:")
        print("=" * 70)

        for i, item in enumerate(sorted_products[:3], 1):
            product = item['product']
            company = item['company']

            print(f"{i}. üõí {product['name']} - {product['price']} —Ä—É–±.")
            print(f"   üè™ –ú–∞–≥–∞–∑–∏–Ω: {company['name']}")
            print(f"   üìç –ê–¥—Ä–µ—Å: {company.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   üöó –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {item['distance']:.1f} –∫–º")
            print(f"   ‚öñÔ∏è  –û–±—â–∏–π –±–∞–ª–ª (—Ü–µ–Ω–∞ + —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ): {item['total_score']:.1f}")
            print(f"   üí° –¶–µ–Ω–∞: {product['price']} —Ä—É–±. + "
                  f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {item['distance']:.1f} –∫–º √ó 10 = {item['total_score']:.1f}")
            print("-" * 50)

    def view_all_companies(self):
        companies = self.load_data(self.companies_file)
        print(f"\nüè¢ –í—Å–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è ({len(companies)}):")
        print("=" * 50)

        for company in companies:
            if 'location' in company:
                distance = GeocodingService.calculate_distance(
                    self.user_location,
                    tuple(company['location'])
                )
            else:
                distance = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            print(f"{company['id']}. {company['name']}")
            print(f"   –ê–¥—Ä–µ—Å: {company.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–∞—Å: {distance:.1f} –∫–º" if isinstance(distance,
                                                                           float) else f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}")
            print("-" * 30)

    def main_menu(self):
        while True:
            print(f"\nüìç === –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∞–π—Å–æ–≤ ===")
            print(f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {self.user_address}")
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {self.user_location}")
            print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
            print("2. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞")
            print("3. –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            print("4. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è")
            print("5. –í—ã—Ö–æ–¥")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == '1':
                self.add_company_price()
            elif choice == '2':
                found_products = self.search_products()
                self.show_best_options(found_products)
            elif choice == '3':
                self.set_user_location()
            elif choice == '4':
                self.view_all_companies()
            elif choice == '5':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    manager = PriceManager()

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not os.path.exists(manager.companies_file):
        manager.save_data(manager.companies_file, [])
    if not os.path.exists(manager.products_file):
        manager.save_data(manager.products_file, [])

    manager.main_menu()